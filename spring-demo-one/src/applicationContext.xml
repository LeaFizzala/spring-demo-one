<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

<!-- load the properties file : sport.properties  -->
<context:property-placeholder location="classpath:sport.properties"/>
    <!-- Define your beans here -->
    
    <!-- Define a bean for the Fortune dependency -->
    <bean id="myFortune"
    	class="com.luv2code.springdemo.HappyFortuneService">
    	
    	</bean>
    	
    <bean id="myCoach" 
    class="com.luv2code.springdemo.BaseballCoach" >
    <!-- Now the reference myCoach will point to the Java class indicated in the class="  "  -->
    
    <!-- Then you need to setup the constructor injection -->
    <constructor-arg ref="myFortune" />
    
   
    
    </bean>
    <!-- Trying to create a second bean for a SubstituteCoach -->
 	<bean id="substituteCoach"
    class="com.luv2code.springdemo.BaseballCoach">
    </bean> 
    
    <bean id="myCricketCoach"
    class="com.luv2code.springdemo.CricketCoach">
    <!-- set up setter injection -->
    <!--*********************** This will call setFortuneService() ***********************-->
    <property name="fortuneService" ref="myFortune"/>
    
    <!-- inject literal values -->
    <!-- <property name="emailAddress" value="coachTedLasso@soccer.com"/>  --><!-- will call the method setEmailAddress() -->
    <!-- the line above was hardcoded, instead we'd rather make use of an external file  -->
    
    <property name="emailAddress" value="${foo.email}"/>
    <property name="team" value="${foo.team}"/>
    </bean>
    
</beans>





